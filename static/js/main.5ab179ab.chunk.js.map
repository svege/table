{"version":3,"sources":["containers/Form/Form.module.scss","containers/SortingButtons/SortingButtons.module.scss","components/Header/Header.module.scss","containers/Table/Table.module.scss","containers/Search/Search.module.scss","components/Spinner/Spinner.module.scss","components/Container/Container.module.scss","components/Row/Row.js","api.js","containers/Table/Table.js","containers/Search/Search.js","components/Input/Input.js","containers/Form/Form.js","components/Spinner/Spinner.js","containers/SortingButtons/SortingButtons.js","components/Container/Container.js","containers/Main/Main.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","employee","deleted","name","job_title","department","monthly_salary","type","onClick","API_ROOT","Table","deleteRow","person","props","initialData","employees","onDeleteClick","filtered","filteredInitial","result","filter","item","deletedPerson","fetch","Object","keys","method","headers","body","JSON","stringify","error","console","this","fields","headRow","entries","map","key","content","length","id","className","classes","Component","Search","state","searchTerm","searchTable","e","onSearchChange","values","toLowerCase","includes","target","value","toString","setState","Container","htmlFor","placeholder","onChange","autoComplete","Input","field","changed","style","textTransform","required","Form","ly_salary","generateId","Date","now","Math","random","substr","addEmployee","preventDefault","onFormSubmit","newEmployee","setValue","inputs","onSubmit","Form__wrap","Form__button","Spinner","Loader","SortingButtons","sortArr","sorting","onFilterClick","sorted","sortDirection","direction","check","isNaN","sort","a","b","toUpperCase","buttons","Button","Sorting","children","Main","isLoaded","handleSearch","foundArr","handleSubmit","handleFilter","sortedArr","sortingValue","sortingDirection","handleDelete","newArr","parse","localStorage","getItem","clear","then","res","json","setItem","message","Header","Header__title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5ab179ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__1323r\",\"Form__wrap\":\"Form_Form__wrap__1TW08\",\"Form__button\":\"Form_Form__button__2A_lJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"SortingButtons_Button__3oduL\",\"Sorting\":\"SortingButtons_Sorting__1slQw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2pVY1\",\"Header__title\":\"Header_Header__title__2yduh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Table_Table__3IVu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Search_Container__1J4DJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__3CCOZ\",\"load2\":\"Spinner_load2__1xnmy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__2jiH8\"};","import React from 'react';\r\nimport {func, number, shape, string} from 'prop-types';\r\n\r\nconst Row = ({employee, deleted}) => {\r\n    return (\r\n        <tr>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.job_title}</td>\r\n            <td>{employee.department}</td>\r\n            <td>{employee.monthly_salary}</td>\r\n            <td><button type='button' onClick={deleted}>&#x2715;</button></td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nRow.propTypes = {\r\n    employee: shape({\r\n        name: string.isRequired,\r\n        job_title: string.isRequired,\r\n        department: string.isRequired,\r\n        monthly_salary: number.isRequired,\r\n\r\n    }).isRequired,\r\n    deleted: func.isRequired,\r\n};\r\n\r\nexport default Row;\r\n","const API_ROOT = 'https://database-dc5a8.firebaseio.com';\r\nexport default API_ROOT;\r\n","import React, {Component} from 'react';\r\nimport {func, shape} from 'prop-types';\r\nimport classes from './Table.module.scss';\r\nimport Row from '../../components/Row/Row';\r\nimport API_ROOT from '../../api';\r\n\r\nclass Table extends Component {\r\n    deleteRow = person => {\r\n        const {initialData, employees, onDeleteClick} = this.props;\r\n        const filtered = [...employees];\r\n        const filteredInitial = [...initialData];\r\n        const result = filtered.filter(item => item.name !== person.name);\r\n        const deletedPerson = filteredInitial.filter(item => item.name === person.name);\r\n\r\n        onDeleteClick(result);\r\n        try {\r\n            fetch(`${API_ROOT}/employees/${Object.keys(deletedPerson)[0]}.json`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(deletedPerson)\r\n            })\r\n        }  catch (error) {\r\n            // eslint-disable-next-line no-console\r\n            console.error('Ошибка:', error);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {fields, employees} = this.props;\r\n\r\n        const columns = Object.entries(fields);\r\n        const headRow = columns.map(item =>\r\n            <th key={`headcell${  item[0]}`}>\r\n                {item[0] === 'monthly_salary' ? `${item[1] }, $` : item[1] }\r\n            </th>);\r\n\r\n        let content = '';\r\n\r\n        if (employees.length > 0) {\r\n            content = employees.map(person => (\r\n                <Row\r\n                    key={person.id}\r\n                    employee={person}\r\n                    deleted={() => this.deleteRow(person)}\r\n                />)\r\n            );\r\n        }\r\n\r\n        return (\r\n            <table className={classes.Table}>\r\n                <thead>\r\n                <tr>\r\n                    {headRow}\r\n                    <th />\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {content}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nTable.propTypes = {\r\n    fields: shape({}).isRequired,\r\n    initialData: shape([]).isRequired,\r\n    employees: shape([]).isRequired,\r\n    onDeleteClick: func.isRequired\r\n};\r\n\r\nexport default Table;\r\n","import React, {Component} from 'react';\r\nimport {func, shape} from 'prop-types';\r\nimport classes from './Search.module.scss';\r\n\r\nclass Search extends Component {\r\n    state ={\r\n        searchTerm:''\r\n    };\r\n\r\n    searchTable = (e) => {\r\n        const {initialData, onSearchChange} = this.props;\r\n        const searchedArr = Object.values([...initialData]);\r\n        const result = searchedArr.filter(item => {\r\n            return (\r\n                item.name.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                item.job_title.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                item.department.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                item.monthly_salary.toString().includes(e.target.value.toLowerCase())\r\n            )\r\n        });\r\n        this.setState( { searchTerm: e.target.value});\r\n        onSearchChange(result);\r\n    };\r\n\r\n\r\n    render() {\r\n        const {searchTerm} = this.state;\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n                {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\r\n                <label htmlFor='search'>Search</label>\r\n                <input id='search'\r\n                       type='search'\r\n                       placeholder='Search...'\r\n                       value={searchTerm}\r\n                       onChange={(e) => this.searchTable(e)}\r\n                       autoComplete='off'/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSearch.propTypes = {\r\n    onSearchChange: func.isRequired,\r\n    initialData: shape([]).isRequired\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport {func, shape, string} from 'prop-types';\r\n\r\nconst Input = ({field, changed, value}) => {\r\n    return (\r\n        <div>\r\n            <label htmlFor={field[0]}>\r\n                {field[1]}\r\n                {field[0] === 'monthly_salary'\r\n                    ? <span style={{textTransform: 'lowercase'}}> (numbers only)</span>\r\n                    : ''\r\n                }\r\n            </label>\r\n\r\n            <input\r\n                id={field[0]}\r\n                placeholder={`Add ${field[1]}`}\r\n                value={value}\r\n                onChange={changed}\r\n                type={field[0] === 'monthly_salary' ? 'number' : 'text'}\r\n                required/>\r\n        </div>\r\n    );\r\n};\r\n\r\nInput.propTypes = {\r\n    field: shape([]).isRequired,\r\n    value: string.isRequired,\r\n    changed: func.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import React, {Component} from 'react';\r\nimport {func, shape, string} from 'prop-types';\r\nimport Input from '../../components/Input/Input';\r\nimport classes from './Form.module.scss'\r\nimport API_ROOT from '../../api';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        employee: {\r\n            name: '',\r\n            job_title: '',\r\n            department: '',\r\n            ly_salary: ''\r\n        }\r\n    };\r\n\r\n    generateId = () => {\r\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n    };\r\n\r\n    addEmployee = (e) => {\r\n        e.preventDefault();\r\n        const {employee} = this.state;\r\n        const {onFormSubmit} = this.props;\r\n        const newEmployee = {...employee, id: this.generateId()};\r\n        onFormSubmit(newEmployee);\r\n        this.setState({employee: {id: '', name: '', job_title: '', department: '', monthly_salary: ''}});\r\n\r\n        try {\r\n            fetch(`${API_ROOT}/employees.json`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(newEmployee)\r\n            })\r\n        } catch (error) {\r\n            // eslint-disable-next-line no-console\r\n            console.error('Ошибка:', error);\r\n        }\r\n    };\r\n\r\n    setValue = (e) => {\r\n        const {employee} = this.state;\r\n        this.setState({employee: {...employee, [e.target.id]: e.target.value}});\r\n    };\r\n\r\n    render() {\r\n        const {employee} = this.state;\r\n        const {fields} = this.props;\r\n\r\n        const columns = Object.entries(fields);\r\n        const inputs = columns.map(item =>\r\n            <Input\r\n                key={item[0]}\r\n                field={item}\r\n                value={employee[item[0]]}\r\n                employee={employee}\r\n                changed={e => this.setValue(e)}/>\r\n        );\r\n\r\n\r\n        return (\r\n            <form className={classes.Form} onSubmit={this.addEmployee} autoComplete='off'>\r\n                <div className={classes.Form__wrap}>\r\n                    {inputs}\r\n                </div>\r\n                <button className={classes.Form__button} type='submit'>Add Row</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    onFormSubmit: func.isRequired,\r\n    fields: shape({\r\n        name: string.isRequired,\r\n        job_title: string.isRequired,\r\n        department: string.isRequired,\r\n        monthly_salary: string.isRequired\r\n    }).isRequired\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nimport classes from './Spinner.module.scss';\r\n\r\nconst Spinner = () => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, {Component} from 'react';\r\nimport {func, shape, string} from 'prop-types';\r\nimport classes from './SortingButtons.module.scss';\r\n\r\nclass SortingButtons extends Component {\r\n    sortArr = (key) => {\r\n        const {employees, sorting, onFilterClick} = this.props;\r\n        const sorted = [...employees];\r\n        let sortDirection = sorting.direction;\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        const check = isNaN(+sorted[0][key]);\r\n\r\n        if (sorting.value === key && sorting.direction === 'up') {\r\n            sortDirection = 'down';\r\n        } else {\r\n            sortDirection = 'up';\r\n        }\r\n\r\n        if (!check) {\r\n            sorted.sort((a, b) => {\r\n                if (+a[key] < +b[key]) return sortDirection === 'up' ? -1 : 1;\r\n                if (+a[key] > +b[key]) return sortDirection === 'up' ? 1 : -1;\r\n                return 0;\r\n            })\r\n        } else {\r\n            sorted.sort((a, b) => {\r\n                if (a[key].toUpperCase() < b[key].toUpperCase()) return sortDirection === 'up' ? -1 : 1;\r\n                if (a[key].toUpperCase() > b[key].toUpperCase()) return sortDirection === 'up' ? 1 : -1;\r\n                return 0;\r\n            })\r\n        }\r\n        onFilterClick(sorted, key, sortDirection)\r\n    };\r\n\r\n    render() {\r\n        const {fields} = this.props;\r\n\r\n        const columns = Object.entries(fields);\r\n        const buttons = columns.map(item => <button\r\n            type='button'\r\n            key={`sort${  item[0]}`}\r\n            className={classes.Button}\r\n            onClick={() => this.sortArr(item[0])}>\r\n            {item[1]}\r\n        </button>);\r\n\r\n\r\n        return (\r\n            <div className={classes.Sorting}>\r\n                <p>Sort by</p>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSortingButtons.propTypes = {\r\n    sorting: shape({\r\n        direction: string.isRequired,\r\n        value: string.isRequired\r\n    }).isRequired,\r\n    fields: shape({\r\n        name: string.isRequired,\r\n        job_title: string.isRequired,\r\n        department: string.isRequired,\r\n        monthly_salary: string.isRequired\r\n    }).isRequired,\r\n    employees: shape([]).isRequired,\r\n    onFilterClick: func.isRequired\r\n};\r\n\r\nexport default SortingButtons;\r\n","import React from 'react';\r\nimport {node} from 'prop-types';\r\nimport classes from './Container.module.scss';\r\n\r\nconst Container = ({children}) => (\r\n    <div className={classes.Container}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n    children: node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import React, {Component} from 'react';\r\nimport Table from '../Table/Table';\r\nimport Search from '../Search/Search';\r\nimport Form from '../Form/Form';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport SortingButtons from '../SortingButtons/SortingButtons';\r\nimport Container from '../../components/Container/Container';\r\nimport API_ROOT from '../../api';\r\n\r\nclass Main extends Component {\r\n    state ={\r\n        initialData: [],\r\n        employees: [],\r\n        fields: {\r\n            name: 'name',\r\n            job_title: 'job title',\r\n            department: 'department',\r\n            monthly_salary: 'monthly salary'\r\n        },\r\n        error: false,\r\n        isLoaded: false,\r\n        sorting: {\r\n            value: '',\r\n            direction: ''\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        const employees = JSON.parse(localStorage.getItem('employees'));\r\n        if (employees) {\r\n            this.setState({\r\n                isLoaded: true,\r\n                initialData: employees,\r\n                employees,\r\n            });\r\n        } else {\r\n            localStorage.clear();\r\n            fetch(`${API_ROOT}/employees.json`)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (res) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            initialData: res,\r\n                            employees: Object.values(res),\r\n                        });\r\n                        localStorage.setItem('employees', JSON.stringify(Object.values(res)))\r\n                    },\r\n                    (error) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            error\r\n                        });\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n    handleSearch = foundArr => {\r\n        this.setState({employees: foundArr});\r\n    };\r\n\r\n    handleSubmit = newEmployee => {\r\n        const {initialData, employees} = this.state;\r\n        this.setState({\r\n            initialData: [...initialData, newEmployee],\r\n            employees: [...employees, newEmployee]\r\n        });\r\n    };\r\n\r\n    handleFilter = (sortedArr, sortingValue, sortingDirection) => {\r\n        this.setState({employees: sortedArr, sorting: {value: sortingValue, direction: sortingDirection}})\r\n    };\r\n\r\n    handleDelete = (newArr) => {\r\n        this.setState({employees: newArr});\r\n    };\r\n\r\n    render() {\r\n        const {error, isLoaded, initialData, employees, fields, sorting} = this.state;\r\n\r\n        let content ='';\r\n\r\n        if (error) {\r\n            content = <p>Ошибка: {error.message}</p>;\r\n        } else if (!isLoaded) {\r\n            content = <Spinner/>;\r\n        } else {\r\n            content = <>\r\n                <Search onSearchChange={this.handleSearch}\r\n                        initialData={initialData}/>\r\n                <SortingButtons\r\n                    employees={employees}\r\n                    onFilterClick={this.handleFilter}\r\n                    sorting={sorting}\r\n                    fields={fields}\r\n                />\r\n                <Table\r\n                    initialData = {initialData}\r\n                    employees={employees}\r\n                    fields={fields}\r\n                    onDeleteClick={this.handleDelete}/>\r\n                <Form fields={fields}\r\n                      onFormSubmit={this.handleSubmit}/>\r\n            </>\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                {content}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport classes from './Header.module.scss';\r\nimport Container from '../Container/Container';\r\n\r\nconst Header = () => (\r\n    <header className={classes.Header}>\r\n        <Container>\r\n            <h1 className={classes.Header__title}>Data Table</h1>\r\n        </Container>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.scss';\nimport Main from \"./containers/Main/Main\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Main/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}